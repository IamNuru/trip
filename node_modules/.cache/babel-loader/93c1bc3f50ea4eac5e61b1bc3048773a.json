{"ast":null,"code":"import axios from \"axios\";\nimport { GET_PLACES, PLACE_ERRORS, SET_LOADING, FILTER_PLACES, GET_WEATHER, WEATHER_ERRORS } from \"./types\";\nexport const getPlaces = (type, ne, sw) => async dispatch => {\n  setLoading();\n  await axios.get(`${process.env.REACT_APP_TRAVEL_ADVISOR_URL}${type}/list-in-boundary`, {\n    params: {\n      bl_latitude: sw.lat,\n      tr_latitude: ne.lat,\n      bl_longitude: sw.lng,\n      tr_longitude: ne.lng\n    },\n    headers: {\n      'x-rapidapi-host': 'travel-advisor.p.rapidapi.com',\n      'x-rapidapi-key': `${process.env.REACT_APP_RAPID_API_SECRETE_KEY}`\n    }\n  }).then(res => {\n    dispatch({\n      type: GET_PLACES,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: PLACE_ERRORS\n    });\n  });\n};\nexport const getWeather = ({\n  lat,\n  lng\n}) => async dispatch => {\n  setLoading();\n  await axios.get(`https://community-open-weather-map.p.rapidapi.com/find`, {\n    params: {\n      lon: lng,\n      lat: lat\n    },\n    headers: {\n      'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com',\n      'x-rapidapi-key': `${process.env.REACT_APP_RAPID_API_SECRETE_KEY}`\n    }\n  }).then(res => {\n    dispatch({\n      type: GET_WEATHER,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err.response.data);\n    dispatch({\n      type: WEATHER_ERRORS\n    });\n  });\n};\nexport const getCurrentPlace = () => async dispatch => {};\nexport const setCurrentPlace = () => dispatch => {};\nexport const filterPlaces = filter => async dispatch => {\n  dispatch({\n    type: FILTER_PLACES,\n    payload: filter\n  });\n};\n\nconst setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/home/generous/projects/trip/src/redux/actions/Place.jsx"],"names":["axios","GET_PLACES","PLACE_ERRORS","SET_LOADING","FILTER_PLACES","GET_WEATHER","WEATHER_ERRORS","getPlaces","type","ne","sw","dispatch","setLoading","get","process","env","REACT_APP_TRAVEL_ADVISOR_URL","params","bl_latitude","lat","tr_latitude","bl_longitude","lng","tr_longitude","headers","REACT_APP_RAPID_API_SECRETE_KEY","then","res","payload","data","catch","err","console","log","getWeather","lon","response","getCurrentPlace","setCurrentPlace","filterPlaces","filter"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,WAAnC,EAAgDC,aAAhD,EAA+DC,WAA/D,EAA4EC,cAA5E,QAAiG,SAAjG;AAGA,OAAO,MAAMC,SAAS,GAAE,CAACC,IAAD,EAAOC,EAAP,EAAWC,EAAX,KAAkB,MAAMC,QAAN,IAAgB;AACtDC,EAAAA,UAAU;AACV,QAAMZ,KAAK,CAACa,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,4BAA6B,GAAER,IAAK,mBAA7D,EACN;AACIS,IAAAA,MAAM,EAAE;AACJC,MAAAA,WAAW,EAAER,EAAE,CAACS,GADZ;AAEJC,MAAAA,WAAW,EAAEX,EAAE,CAACU,GAFZ;AAGJE,MAAAA,YAAY,EAAEX,EAAE,CAACY,GAHb;AAIJC,MAAAA,YAAY,EAAEd,EAAE,CAACa;AAJb,KADZ;AAOME,IAAAA,OAAO,EAAE;AACP,yBAAmB,+BADZ;AAEP,wBAAmB,GAAEV,OAAO,CAACC,GAAR,CAAYU,+BAAgC;AAF1D;AAPf,GADM,EAcLC,IAdK,CAcAC,GAAG,IAAG;AACRhB,IAAAA,QAAQ,CAAC;AACNH,MAAAA,IAAI,EAAEP,UADA;AAEN2B,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFP,KAAD,CAAR;AAIH,GAnBK,EAmBHC,KAnBG,CAmBGC,GAAG,IAAG;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACApB,IAAAA,QAAQ,CAAC;AACLH,MAAAA,IAAI,EAAEN;AADD,KAAD,CAAR;AAGH,GAxBK,CAAN;AA0BH,CA5BM;AA6BP,OAAO,MAAMgC,UAAU,GAAC,CAAC;AAACf,EAAAA,GAAD;AAAMG,EAAAA;AAAN,CAAD,KAAgB,MAAMX,QAAN,IAAgB;AACpDC,EAAAA,UAAU;AACV,QAAMZ,KAAK,CAACa,GAAN,CAAW,wDAAX,EACN;AACII,IAAAA,MAAM,EAAE;AACJkB,MAAAA,GAAG,EAAEb,GADD;AAEJH,MAAAA,GAAG,EAAEA;AAFD,KADZ;AAMMK,IAAAA,OAAO,EAAE;AACP,yBAAmB,2CADZ;AAEP,wBAAmB,GAAEV,OAAO,CAACC,GAAR,CAAYU,+BAAgC;AAF1D;AANf,GADM,EAaLC,IAbK,CAaAC,GAAG,IAAG;AACRhB,IAAAA,QAAQ,CAAC;AACNH,MAAAA,IAAI,EAAEH,WADA;AAENuB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFP,KAAD,CAAR;AAIH,GAlBK,EAkBHC,KAlBG,CAkBGC,GAAG,IAAG;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACK,QAAJ,CAAaP,IAAzB;AACAlB,IAAAA,QAAQ,CAAC;AACLH,MAAAA,IAAI,EAAEF;AADD,KAAD,CAAR;AAGH,GAvBK,CAAN;AAyBH,CA3BM;AA6BP,OAAO,MAAM+B,eAAe,GAAE,MAAM,MAAM1B,QAAN,IAAgB,CAEnD,CAFM;AAMP,OAAO,MAAM2B,eAAe,GAAG,MAAM3B,QAAQ,IAAG,CAE/C,CAFM;AAKP,OAAO,MAAM4B,YAAY,GAAIC,MAAD,IAAY,MAAM7B,QAAN,IAAgB;AACpDA,EAAAA,QAAQ,CAAC;AACLH,IAAAA,IAAI,EAACJ,aADA;AAELwB,IAAAA,OAAO,EAACY;AAFH,GAAD,CAAR;AAIH,CALM;;AAQP,MAAM5B,UAAU,GAAG,MAAK;AACpB,SAAM;AACFJ,IAAAA,IAAI,EAAEL;AADJ,GAAN;AAGH,CAJD","sourcesContent":["import axios from \"axios\";\nimport { GET_PLACES, PLACE_ERRORS, SET_LOADING, FILTER_PLACES, GET_WEATHER, WEATHER_ERRORS} from \"./types\";\n\n\nexport const getPlaces =(type, ne, sw) => async dispatch=>{\n    setLoading()\n    await axios.get(`${process.env.REACT_APP_TRAVEL_ADVISOR_URL}${type}/list-in-boundary`, \n    {\n        params: {\n            bl_latitude: sw.lat,\n            tr_latitude: ne.lat,\n            bl_longitude: sw.lng,\n            tr_longitude: ne.lng,\n          },\n          headers: {\n            'x-rapidapi-host': 'travel-advisor.p.rapidapi.com',\n            'x-rapidapi-key': `${process.env.REACT_APP_RAPID_API_SECRETE_KEY}`\n          }\n        }\n    )\n    .then(res =>{\n        dispatch({\n           type: GET_PLACES,\n           payload: res.data\n        })\n    }).catch(err =>{\n        console.log(err)\n        dispatch({\n            type: PLACE_ERRORS,\n         })\n    })\n    \n}\nexport const getWeather=({lat, lng}) => async dispatch=>{\n    setLoading()\n    await axios.get(`https://community-open-weather-map.p.rapidapi.com/find`, \n    {\n        params: {\n            lon: lng,\n            lat: lat,\n\n          },\n          headers: {\n            'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com',\n            'x-rapidapi-key': `${process.env.REACT_APP_RAPID_API_SECRETE_KEY}`\n          }\n        }\n    )\n    .then(res =>{\n        dispatch({\n           type: GET_WEATHER,\n           payload: res.data\n        })\n    }).catch(err =>{\n        console.log(err.response.data)\n        dispatch({\n            type: WEATHER_ERRORS,\n         })\n    })\n    \n}\n\nexport const getCurrentPlace =() => async dispatch=>{\n   \n}\n\n\n\nexport const setCurrentPlace = () => dispatch =>{\n   \n}\n\n\nexport const filterPlaces = (filter) => async dispatch=>{\n    dispatch({\n        type:FILTER_PLACES,\n        payload:filter\n    })\n}\n\n\nconst setLoading = () =>{\n    return{\n        type: SET_LOADING,\n    }\n}\n"]},"metadata":{},"sourceType":"module"}